// console.log("1. B·∫Øt ƒë·∫ßu t√°c v·ª• ƒë·ªìng b·ªô"); // 1

// function hamDongBo() {
//     let sum = 0;
//     for (let i = 0; i < 100000; i++) { // Gi·∫£ l·∫≠p t√°c v·ª• t·ªën th·ªùi gian (t√≠nh to√°n)
//         sum += i;
//     }
//     console.log("2. T√°c v·ª• ƒë·ªìng b·ªô ho√†n th√†nh, t·ªïng l√†:", sum); // 2
// }

// hamDongBo();

// console.log("3. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh ƒë·ªìng b·ªô"); // 3


// console.log("1. B·∫Øt ƒë·∫ßu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô"); // 1

// setTimeout(function() { // B·∫Øt ƒë·∫ßu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (delay 1 gi√¢y)
//     console.log("2. T√°c v·ª• b·∫•t ƒë·ªìng b·ªô ho√†n th√†nh sau 1 gi√¢y"); // 3 (sau 1 gi√¢y)
// }, 1000);

// setTimeout(function() { // B·∫Øt ƒë·∫ßu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (delay 1 gi√¢y)
//     console.log("2. T√°c v·ª• b·∫•t ƒë·ªìng b·ªô ho√†n th√†nh sau 2 gi√¢y"); // 3 (sau 1 gi√¢y)
// }, 2000);

// console.log("3. Ti·∫øp t·ª•c c√¥ng vi·ªác kh√°c..."); // 2 (in ra ngay l·∫≠p t·ª©c)


// callback hell

// function tacVuA(callback) {
//     setTimeout(function() {
//         console.log("T√°c v·ª• A ho√†n th√†nh");
//         callback(); // G·ªçi callback khi t√°c v·ª• A xong
//     }, 500); // M√¥ ph·ªèng 500ms delay cho t√°c v·ª• A
// }

// function tacVuB(callback) {
//     setTimeout(function() {
//         console.log("T√°c v·ª• B ho√†n th√†nh");
//         callback(); // G·ªçi callback khi t√°c v·ª• B xong
//     }, 500); // M√¥ ph·ªèng 500ms delay cho t√°c v·ª• B
// }

// function tacVuC(callback) {
//     setTimeout(function() {
//         console.log("T√°c v·ª• C ho√†n th√†nh");
//         callback(); // G·ªçi callback khi t√°c v·ª• C xong
//     }, 500); // M√¥ ph·ªèng 500ms delay cho t√°c v·ª• C
// }

// // G·ªçi Callback Hell (l·ªìng t√°c v·ª• B v√†o callback c·ªßa A, v√† t√°c v·ª• C v√†o callback c·ªßa B)
// tacVuA(function() { // Callback c·ªßa t√°c v·ª• A
//     tacVuB(function() { // Callback c·ªßa t√°c v·ª• B (l·ªìng trong callback c·ªßa A)
//         tacVuC(function() { // Callback c·ªßa t√°c v·ª• C (l·ªìng trong callback c·ªßa B)
//             console.log("C·∫£ ba t√°c v·ª• A, B, C ƒë√£ ho√†n th√†nh (Callback Hell)");
//         });
//     });
// });

// console.log("Ch∆∞∆°ng tr√¨nh ch√≠nh v·∫´n ch·∫°y..."); // In ra tr∆∞·ªõc khi c√°c t√°c v·ª• ho√†n th√†nh


// function run1(callback) {
//   setTimeout(() => {
//     console.log("Ng∆∞·ªùi 1 ch·∫°y");
//     callback();
//   }, 1000);
// }

// function run2(callback) {
//   setTimeout(() => {
//     console.log("Ng∆∞·ªùi 2 ch·∫°y");
//     callback();
//   }, 1000);
// }

// function run3(callback) {
//   setTimeout(() => {
//     console.log("Ng∆∞·ªùi 3 ch·∫°y");
//     callback();
//   }, 1000);
// }

// function run4(callback) {
//   setTimeout(() => {
//     console.log("Ng∆∞·ªùi 4 ch·∫°y");
//     callback();
//   }, 1000);
// }

// // B·∫Øt ƒë·∫ßu ch·∫°y b·∫±ng callback l·ªìng nhau
// run1(() => {
//   run2(() => {
//     run3(() => {
//       run4(() => {
//         console.log("Ho√†n th√†nh!");
//       });
//     });
//   });
// });


// const myFirstPromise = new Promise(function(resolve, reject) {
//     console.log("Promise ƒëang ƒë∆∞·ª£c t·∫°o...");
//     setTimeout(function() {
//         resolve("Promise ƒë√£ th√†nh c√¥ng!"); // G·ªçi resolve sau 1 gi√¢y
//     }, 1000);
// });

// console.log("Promise ƒë√£ ƒë∆∞·ª£c t·∫°o (tr·∫°ng th√°i ban ƒë·∫ßu: pending)");




// function muaSua() {
//   return new Promise(resolve => {
//     setTimeout(() => {
//       console.log("‚úÖ ƒê√£ mua xong s·ªØa ü•õ");
//       resolve();
//     }, 500);
//   });
// }

// function muaBanh() {
//   return new Promise(resolve => {
//     setTimeout(() => {
//       console.log("‚úÖ ƒê√£ mua xong b√°nh üçû");
//       resolve();
//     }, 500);
//   });
// }

// function muaTraiCay() {
//   return new Promise(resolve => {
//     setTimeout(() => {
//       console.log("‚úÖ ƒê√£ mua xong tr√°i c√¢y üçé");
//       resolve();
//     }, 500);
//   });
// }

// muaSua()
//   .then(muaBanh)
//   .then(muaTraiCay)
//   .then(() => {
//     console.log("üéâ ƒê√£ c√≥ ƒë·ªß s·ªØa, b√°nh v√† tr√°i c√¢y!");
//   });

// console.log("üìå B·∫°n v·∫´n c√≥ th·ªÉ l√†m vi·ªác kh√°c trong l√∫c ch·ªù mua ƒë·ªì...");


// const loiHuaMuaDoAn = new Promise(function(thanhCong, thatBai) {
//     console.log("L·ªùi h·ª©a mua ƒë·ªì ƒÉn ƒëang ƒë∆∞·ª£c t·∫°o ra..."); // 1. B√°o hi·ªáu l·ªùi h·ª©a b·∫Øt ƒë·∫ßu

//     setTimeout(function() {
//         const coDoAnKhong = true; // Gi·∫£ s·ª≠ h√¥m nay qu√°n c√≥ ƒë·ªì ƒÉn

//         if (coDoAnKhong) {
//             thanhCong("ƒê·ªì ƒÉn ƒë√£ mua xong!"); // üçï Th√†nh c√¥ng! G·ªçi thanhCong khi mua ƒë∆∞·ª£c ƒë·ªì ƒÉn
//         } else {
//             thatBai("H√¥m nay qu√°n h·∫øt ƒë·ªì ƒÉn r·ªìi!"); // üò≠ Th·∫•t b·∫°i! G·ªçi thatBai n·∫øu qu√°n h·∫øt ƒë·ªì ƒÉn
//         }
//     }, 1000); // Ch·ªù 1 gi√¢y ƒë·ªÉ ƒëi mua ƒë·ªì ƒÉn
// });

// console.log("L·ªùi h·ª©a ƒë√£ ƒë∆∞·ª£c t·∫°o ra (ƒëang ch·ªù ƒëi mua ƒë·ªì ƒÉn)"); // 2. B√°o hi·ªáu l·ªùi h·ª©a ƒë√£ s·∫µn s√†ng

// loiHuaMuaDoAn
//     .then(function(thanhCong) {
//         // H√†m n√†y ch·∫°y N·∫æU MUA ƒê∆Ø·ª¢C ƒê·ªí ƒÇN (thanhCong)
//         console.log(".then() ƒë∆∞·ª£c g·ªçi - MUA ƒê·ªí ƒÇN TH√ÄNH C√îNG!"); // 4. B√°o hi·ªáu th√†nh c√¥ng
//         console.log("K·∫øt qu·∫£:", thanhCong); // In ra: "ƒê·ªì ƒÉn ƒë√£ mua xong!"
//     })
//     .catch(function(thatBai) {
//         // H√†m n√†y ch·∫°y N·∫æU KH√îNG MUA ƒê∆Ø·ª¢C ƒê·ªí ƒÇN (thatBai)
//         console.log(".catch() ƒë∆∞·ª£c g·ªçi - MUA ƒê·ªí ƒÇN TH·∫§T B·∫†I!"); // S·∫Ω kh√¥ng ch·∫°y n·∫øu c√≥ ƒë·ªì ƒÉn
//         console.error("L√Ω do:", thatBai); // In ra l√Ω do th·∫•t b·∫°i
//     })
//     .finally(function() {
//         // H√†m n√†y ch·∫°y SAU KHI MUA XONG (d√π th√†nh c√¥ng hay th·∫•t b·∫°i)
//         console.log(".finally() ƒë∆∞·ª£c g·ªçi - K·∫æT TH√öC VI·ªÜC MUA ƒê·ªí ƒÇN!"); // 5. B√°o hi·ªáu k·∫øt th√∫c
//     });

// console.log("B·∫°n v·∫´n ƒëang l√†m vi·ªác kh√°c trong khi ch·ªù mua ƒë·ªì ƒÉn..."); // 3. B√°o hi·ªáu b·∫°n kh√¥ng ph·∫£i ch·ªù mua ƒë·ªì ƒÉn xong


// function tacVuPromiseA() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("T√°c v·ª• Promise A ho√†n th√†nh");
//             resolve("K·∫øt qu·∫£ t·ª´ Task A");
//         }, 500);
//     });
// }

// function tacVuPromiseB(dataFromA) {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("T√°c v·ª• Promise B ho√†n th√†nh (d·ª±a tr√™n:", dataFromA, ")");
//             resolve("K·∫øt qu·∫£ t·ª´ Task B");
//         }, 500);
//     });
// }

// function tacVuPromiseC(dataFromB) {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log("T√°c v·ª• Promise C ho√†n th√†nh (d·ª±a tr√™n:", dataFromB, ")");
//             resolve("K·∫øt qu·∫£ t·ª´ Task C (cu·ªëi c√πng)");
//         }, 500);
//     });
// }

// // Promise Chain (thay th·∫ø Callback Hell)
// tacVuPromiseA()
//     .then(dataA => tacVuPromiseB(dataA)) // Chaining: tr·∫£ v·ªÅ Promise t·ª´ .then()
//     .then(dataB => tacVuPromiseC(dataB)) // Chaining ti·∫øp
//     .then(finalResult => {
//         console.log("Chu·ªói Promise ho√†n th√†nh, k·∫øt qu·∫£ cu·ªëi c√πng:", finalResult);
//     })
//     .catch(error => {
//         console.error("L·ªói trong chu·ªói Promise:", error);
//     });

// console.log("Ch∆∞∆°ng tr√¨nh ch√≠nh v·∫´n ch·∫°y..."); // In ra tr∆∞·ªõc khi chu·ªói Promise xong
const promise1 = new Promise((resolve) => {
    setTimeout(() => {
        console.log("Promise 1 ƒë√£ resolve sau 2 gi√¢y");
        resolve(1);
    }, 2000);
});

const promise2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("Promise 2 ƒë√£ b·ªã reject sau 1 gi√¢y");
         resolve(2);
    }, 1000);
});

const promise3 = new Promise((resolve) => {
    setTimeout(() => {
        console.log("Promise 3 ƒë√£ resolve sau 1.5 gi√¢y");
        resolve(3);
    }, 1500);
});

console.log("B·∫Øt ƒë·∫ßu ch·∫°y Promise.all...");

Promise.all([promise1, promise2, promise3])
    .then((results2) => {
        console.log("Promise.all ƒë√£ resolve!");
        console.log("T·∫•t c·∫£ Promise th√†nh c√¥ng:", results2);
    })
    .catch((error) => {
        console.error("√çt nh·∫•t m·ªôt Promise th·∫•t b·∫°i:", error);
    });

console.log("Ch∆∞∆°ng tr√¨nh ch√≠nh v·∫´n ch·∫°y...");
